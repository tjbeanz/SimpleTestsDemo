name: CI/CD Pipeline with Comprehensive Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '8.0.x'
  CONFIGURATION: 'Release'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build solution
      run: dotnet build --configuration ${{ env.CONFIGURATION }} --no-restore
      
    - name: Run Unit Tests
      run: |
        dotnet test SimpleTestsDemo.UnitTests/SimpleTestsDemo.UnitTests.csproj \
          --configuration ${{ env.CONFIGURATION }} \
          --no-build \
          --logger "trx;LogFileName=unit-tests.trx" \
          --logger "console;verbosity=detailed" \
          --results-directory TestResults/UnitTests \
          --collect:"XPlat Code Coverage" \
          -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
          
    - name: Run Integration Tests
      run: |
        dotnet test SimpleTestsDemo.IntegrationTests/SimpleTestsDemo.IntegrationTests.csproj \
          --configuration ${{ env.CONFIGURATION }} \
          --no-build \
          --logger "trx;LogFileName=integration-tests.trx" \
          --logger "console;verbosity=detailed" \
          --results-directory TestResults/IntegrationTests \
          --collect:"XPlat Code Coverage" \
          -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
          
    - name: Run Contract Tests
      run: |
        dotnet test SimpleTestsDemo.ContractTests/SimpleTestsDemo.ContractTests.csproj \
          --configuration ${{ env.CONFIGURATION }} \
          --no-build \
          --logger "trx;LogFileName=contract-tests.trx" \
          --logger "console;verbosity=detailed" \
          --results-directory TestResults/ContractTests
          
    - name: Install ReportGenerator
      run: dotnet tool install -g dotnet-reportgenerator-globaltool
      
    - name: Generate Coverage Report
      run: |
        reportgenerator \
          "-reports:TestResults/**/coverage.cobertura.xml" \
          "-targetdir:TestResults/CoverageReport" \
          "-reporttypes:Html;Cobertura;JsonSummary;Badges;TextSummary;MarkdownSummary" \
          "-title:SimpleTestsDemo Coverage Report"
          
    - name: Generate Test Summary
      run: |
        # Create a comprehensive test summary
        echo "# üìä Test Results Summary" > test-summary.md
        echo "" >> test-summary.md
        echo "**Timestamp:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> test-summary.md
        echo "**Configuration:** ${{ env.CONFIGURATION }}" >> test-summary.md
        echo "**Commit:** ${{ github.sha }}" >> test-summary.md
        echo "" >> test-summary.md
        
        # Process test results
        if [ -f "TestResults/CoverageReport/Summary.txt" ]; then
          echo "## üìà Code Coverage" >> test-summary.md
          echo "" >> test-summary.md
          echo '```' >> test-summary.md
          cat TestResults/CoverageReport/Summary.txt >> test-summary.md
          echo '```' >> test-summary.md
          echo "" >> test-summary.md
        fi
        
        # Add badge information if available
        if [ -f "TestResults/CoverageReport/badge_combined.svg" ]; then
          echo "## üèÜ Coverage Badges" >> test-summary.md
          echo "" >> test-summary.md
          echo "Coverage badges are available in the artifacts." >> test-summary.md
          echo "" >> test-summary.md
        fi
        
        # Add Pact contracts information
        echo "## ü§ù Contract Tests" >> test-summary.md
        echo "" >> test-summary.md
        if [ -d "SimpleTestsDemo.ContractTests/pacts" ]; then
          echo "Pact files generated:" >> test-summary.md
          find SimpleTestsDemo.ContractTests/pacts -name "*.json" -exec basename {} \; | sed 's/^/- /' >> test-summary.md
        else
          echo "No pact files generated." >> test-summary.md
        fi
        echo "" >> test-summary.md
        
    - name: Publish Test Results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Test Results
        path: 'TestResults/**/*.trx'
        reporter: dotnet-trx
        fail-on-error: false
        
    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        files: TestResults/CoverageReport/Cobertura.xml
        fail_ci_if_error: false
        verbose: true
        
    - name: Upload Test Results Artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ github.run_number }}
        path: |
          TestResults/
          test-summary.md
        retention-days: 30
        
    - name: Upload Pact Files
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: pact-contracts-${{ github.run_number }}
        path: |
          SimpleTestsDemo.ContractTests/pacts/
        retention-days: 30
        
    - name: Comment Test Results on PR
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request' && always()
      with:
        script: |
          const fs = require('fs');
          
          let summary = '# üß™ Test Results Summary\n\n';
          summary += `**Workflow:** ${context.workflow}\n`;
          summary += `**Run Number:** ${context.runNumber}\n`;
          summary += `**Commit:** ${context.sha.substring(0, 7)}\n\n`;
          
          // Read test summary if it exists
          try {
            if (fs.existsSync('test-summary.md')) {
              const testSummary = fs.readFileSync('test-summary.md', 'utf8');
              summary += testSummary;
            }
          } catch (error) {
            console.log('No test summary file found');
          }
          
          summary += '\n\n---\n';
          summary += `üìÅ [Download detailed test results](${context.payload.repository.html_url}/actions/runs/${context.runId})\n`;
          summary += `üìä [View coverage report in artifacts](${context.payload.repository.html_url}/actions/runs/${context.runId})\n`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: summary
          });

  publish-pacts:
    name: Publish Pact Contracts
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download Pact Artifacts
      uses: actions/download-artifact@v4
      with:
        name: pact-contracts-${{ github.run_number }}
        path: pacts/
        
    - name: Setup Pact CLI (Optional - for Pact Broker integration)
      run: |
        echo "# Pact Contract Publishing"
        echo "To integrate with Pact Broker, uncomment and configure the following steps:"
        echo "# 1. Install Pact CLI"
        echo "# 2. Publish contracts to Pact Broker"
        echo "# 3. Tag contracts with version"
        echo ""
        echo "Example commands:"
        echo "# pact-broker publish pacts/ --consumer-app-version=\${{ github.sha }} --broker-base-url=\${{ secrets.PACT_BROKER_BASE_URL }} --broker-token=\${{ secrets.PACT_BROKER_TOKEN }}"
        
    - name: Archive Pact Contracts
      uses: actions/upload-artifact@v4
      with:
        name: published-pacts-${{ github.sha }}
        path: pacts/
        retention-days: 90

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/develop' && success()
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Build for Deployment
      run: |
        dotnet publish SimpleTestsDemo.Api/SimpleTestsDemo.Api.csproj \
          --configuration ${{ env.CONFIGURATION }} \
          --output ./deployment
          
    - name: Deploy to Staging (Placeholder)
      run: |
        echo "üöÄ Deploying to staging environment..."
        echo "Deployment artifact created: ./deployment"
        echo "In a real scenario, you would deploy to your staging environment here"
        
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, publish-pacts]
    if: github.ref == 'refs/heads/main' && success()
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Build for Production
      run: |
        dotnet publish SimpleTestsDemo.Api/SimpleTestsDemo.Api.csproj \
          --configuration ${{ env.CONFIGURATION }} \
          --output ./production
          
    - name: Deploy to Production (Placeholder)
      run: |
        echo "üåü Deploying to production environment..."
        echo "Production deployment artifact created: ./production"
        echo "In a real scenario, you would deploy to your production environment here"
