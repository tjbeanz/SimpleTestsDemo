name: Build and Test

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master ]

permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: write
  statuses: write

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
        
    - name: Restore dependencies
      run: dotnet restore
      
    - name: Build
      run: dotnet build --no-restore --configuration Release
      
    - name: Run Tests with PowerShell Script
      shell: pwsh
      run: |
        # Make the script executable and run it with coverage
        ./run-tests-simple.ps1 -Configuration Release -GenerateCoverage -GenerateReports
        
    - name: Debug Coverage Files
      shell: pwsh
      run: |
        Write-Host "Checking for coverage files..."
        Get-ChildItem -Path "TestResults" -Recurse -Filter "coverage.cobertura.xml" | ForEach-Object { 
          Write-Host "Found: $($_.FullName)"
          $content = Get-Content $_.FullName -Raw
          if ($content -match 'lines-covered="([0-9]+)"') {
            Write-Host "  Lines covered: $($matches[1])"
          } else {
            Write-Host "  No coverage data found"
          }
        }
        
        if (Test-Path "TestResults/CoverageReport/Cobertura.xml") {
          Write-Host "Final Cobertura.xml exists"
          $content = Get-Content "TestResults/CoverageReport/Cobertura.xml" -Raw
          if ($content -match 'lines-covered="([0-9]+)"') {
            Write-Host "Final report has $($matches[1]) lines covered"
          }
        } else {
          Write-Host "Final Cobertura.xml not found"
        }
    
    - name: Validate Coverage Report
      shell: pwsh
      run: |
        if (Test-Path "TestResults/CoverageReport/Cobertura.xml") {
          Write-Host "Coverage file exists, checking content..."
          $content = Get-Content "TestResults/CoverageReport/Cobertura.xml" -Raw
          if ($content -match '<package ') {
            Write-Host "Coverage file contains package data - proceeding with summary"
            echo "HAS_COVERAGE_DATA=true" >> $env:GITHUB_ENV
          } else {
            Write-Host "Coverage file exists but contains no package data"
            echo "HAS_COVERAGE_DATA=false" >> $env:GITHUB_ENV
          }
        } else {
          Write-Host "No coverage file found"
          echo "HAS_COVERAGE_DATA=false" >> $env:GITHUB_ENV
        }
    
    - name: Publish Test Results
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: 'Test Results'
        path: 'TestResults/**/*.trx'
        reporter: dotnet-trx
        fail-on-error: false
        
    - name: Code Coverage Summary
      uses: irongut/CodeCoverageSummary@v1.3.0
      if: env.HAS_COVERAGE_DATA == 'true'
      with:
        filename: TestResults/CoverageReport/Cobertura.xml
        badge: true
        fail_below_min: false
        format: markdown
        hide_branch_rate: false
        hide_complexity: false
        indicators: true
        output: both
        thresholds: '60 80'
      continue-on-error: true
        
    - name: Create Coverage Summary Fallback
      if: env.HAS_COVERAGE_DATA == 'false'
      shell: pwsh
      run: |
        @"
        ## 📊 Code Coverage Summary
        
        ⚠️ No coverage data available for this run.
        
        **Possible reasons:**
        - Tests were skipped or failed to run
        - Coverage collection is not properly configured
        - Build configuration excludes test projects
        
        📋 **Test Status:** Check the test results above for more details.
        "@ | Out-File -FilePath "code-coverage-results.md" -Encoding UTF8
        
    - name: Comment Test Results on PR
      uses: marocchino/sticky-pull-request-comment@v2
      if: github.event_name == 'pull_request'
      with:
        recreate: true
        path: code-coverage-results.md
        
    - name: Upload All Test Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-reports-${{ github.run_number }}
        path: |
          TestResults/
        retention-days: 30

  # Deploy coverage reports to GitHub Pages
  deploy-reports:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    
    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment originates from an appropriate source
      contents: read    # to download artifacts
    
    # Deploy to the github-pages environment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
      
    steps:
    - name: Download test reports
      uses: actions/download-artifact@v4
      with:
        name: test-reports-${{ github.run_number }}
        path: test-reports
        
    - name: Create Pages Index
      run: |
        mkdir -p pages
        cat > pages/index.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
            <title>SimpleTestsDemo - Test Reports</title>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <style>
                body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif; margin: 40px; }
                .container { max-width: 1200px; margin: 0 auto; }
                .header { text-align: center; margin-bottom: 40px; }
                .reports { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; }
                .report-card { border: 1px solid #ddd; border-radius: 8px; padding: 20px; background: #f9f9f9; }
                .report-card h3 { margin-top: 0; color: #333; }
                .report-link { display: inline-block; padding: 10px 20px; background: #0366d6; color: white; text-decoration: none; border-radius: 5px; margin: 5px 5px 5px 0; }
                .report-link:hover { background: #0256cc; }
                .timestamp { text-align: center; color: #666; margin-top: 40px; }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>SimpleTestsDemo - Test Reports</h1>
                    <p>Automated test results and coverage reports</p>
                </div>
                
                <div class="reports">
                    <div class="report-card">
                        <h3>📊 Code Coverage</h3>
                        <p>Comprehensive code coverage analysis across all projects</p>
                        <a href="CoverageReport/index.html" class="report-link">View Coverage Report</a>
                    </div>
                    
                    <div class="report-card">
                        <h3>🧪 Unit Tests</h3>
                        <p>Fast, isolated unit tests with mocked dependencies</p>
                        <a href="UnitTests/UnitTests.html" class="report-link">View Unit Test Report</a>
                    </div>
                    
                    <div class="report-card">
                        <h3>🔗 Integration Tests</h3>
                        <p>End-to-end API tests with real HTTP requests</p>
                        <a href="IntegrationTests/IntegrationTests.html" class="report-link">View Integration Test Report</a>
                    </div>
                    
                    <div class="report-card">
                        <h3>📋 Contract Tests</h3>
                        <p>API contract validation and structure verification</p>
                        <a href="ContractTests/ContractTests.html" class="report-link">View Contract Test Report</a>
                    </div>
                </div>
                
                <div class="timestamp">
                    <p>Generated on: <span id="timestamp"></span></p>
                    <script>document.getElementById('timestamp').textContent = new Date().toUTCString();</script>
                </div>
            </div>
        </body>
        </html>
        EOF
        
        # Copy reports to pages directory (they're all in test-reports now)
        cp -r test-reports/* pages/
        
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Upload pages artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: pages/
        
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
